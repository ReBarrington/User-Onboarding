{"ast":null,"code":"var _jsxFileName = \"/Users/reaganbarrington/code/LambdaSchool/Unit2_Web-Applications-I/3_Single-Page-Applications/4_Advanced-Form-Management/User-Onboarding/src/components/Form.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { withFormik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\n\nconst FormComponent = ({\n  values,\n  errors,\n  touched,\n  status\n}) => {\n  const [formInfo, setFormInfo] = useState([]);\n  useEffect(() => {\n    console.log(\"status has changed!\", status);\n    status && setFormInfo(formInfo => [...formInfo, status]);\n  }, [status]);\n  return React.createElement(\"div\", {\n    className: \"form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, \"Name:\", React.createElement(Field, {\n    id: \"name\",\n    type: \"text\",\n    name: \"name\",\n    placeholder: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }), touched.name && errors.name && React.createElement(\"p\", {\n    className: \"errors\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, errors.name)), React.createElement(\"label\", {\n    htmlFor: \"email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, \"Email:\", React.createElement(Field, {\n    id: \"email\",\n    type: \"email\",\n    name: \"email\",\n    placeholder: \"email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    htmlFor: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"Password:\", React.createElement(Field, {\n    id: \"password\",\n    type: \"password\",\n    name: \"password\",\n    placeholder: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    className: \"checkbox-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"Terms of Service:\", React.createElement(Field, {\n    type: \"checkbox\",\n    name: \"terms\",\n    checked: values.terms,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"checkmark\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"Submit!\")));\n};\n\nconst FormikFormComponent = withFormik({\n  mapPropsToValues(props) {\n    return {\n      name: props.name || \"\",\n      email: props.email || \"\",\n      password: props.password || \"\",\n      terms: props.terms || \"\"\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    name: Yup.string().required(\"NAME IS REQUIRED\")\n  }),\n\n  handleSubmit(values, {\n    setStatus,\n    resetForm\n  }) {\n    console.log(\"submitting\", values);\n    axios.post(\"https://reqres.in/api/users/\", values).then(res => {\n      console.log(\"success\", res);\n      setStatus(res.data);\n      resetForm();\n    }).catch(err => console.log(err.response));\n  }\n\n})(FormComponent);\nexport default FormikFormComponent;","map":{"version":3,"sources":["/Users/reaganbarrington/code/LambdaSchool/Unit2_Web-Applications-I/3_Single-Page-Applications/4_Advanced-Form-Management/User-Onboarding/src/components/Form.js"],"names":["React","useState","useEffect","withFormik","Form","Field","Yup","axios","FormComponent","values","errors","touched","status","formInfo","setFormInfo","console","log","name","terms","FormikFormComponent","mapPropsToValues","props","email","password","validationSchema","object","shape","string","required","handleSubmit","setStatus","resetForm","post","then","res","data","catch","err","response"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { withFormik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\n\nconst FormComponent = ({ values, errors, touched, status }) => {\n    const [formInfo, setFormInfo] = useState([]);\n    useEffect(() => {\n        console.log(\"status has changed!\", status);\n        status && setFormInfo(formInfo => [...formInfo, status]);\n    }, [status]);\n    return (\n        <div className=\"form\">\n            <Form>\n                <label htmlFor=\"name\">\n                    Name:\n                    <Field\n                        id=\"name\"\n                        type=\"text\"\n                        name=\"name\"\n                        placeholder=\"name\"\n                        />\n                        {/* touched is if input has been visited, errors are captured from Yup validation. \n                        If has been visited && errors exist for that input => render JSX to show errors */}\n                        {touched.name && errors.name && (\n                        <p className=\"errors\">{errors.name}</p>\n                        )}\n                </label>\n                <label htmlFor=\"email\">\n                    Email:\n                    <Field\n                        id=\"email\"\n                        type=\"email\"\n                        name=\"email\"\n                        placeholder=\"email\"\n                        />\n                </label>\n                <label htmlFor=\"password\">\n                    Password:\n                    <Field\n                        id=\"password\"\n                        type=\"password\"\n                        name=\"password\"\n                        placeholder=\"password\"\n                        />\n                </label>\n                <label className=\"checkbox-container\">\n                    Terms of Service:\n                    <Field\n                        type=\"checkbox\"\n                        name=\"terms\"\n                        checked={values.terms}\n                        />\n                    <span className=\"checkmark\" />\n                </label>\n                <button type=\"submit\">Submit!</button>\n            </Form>\n        </div>\n    )\n}\n\nconst FormikFormComponent = withFormik({\n    mapPropsToValues(props) {\n        return {\n            name: props.name || \"\",\n            email: props.email || \"\",\n            password: props.password || \"\",\n            terms: props.terms || \"\",\n\n        };\n    },\n    validationSchema: Yup.object().shape({\n        name: Yup.string().required(\"NAME IS REQUIRED\")\n    }),\n    handleSubmit(values, { setStatus, resetForm }) {\n        console.log(\"submitting\", values);\n        axios\n            .post(\"https://reqres.in/api/users/\", values)\n            .then(res => {\n                console.log(\"success\", res);\n                setStatus(res.data);\n                resetForm();\n            })\n            .catch(err => console.log(err.response));\n    }\n})(FormComponent);\n\nexport default FormikFormComponent;"]},"metadata":{},"sourceType":"module"}